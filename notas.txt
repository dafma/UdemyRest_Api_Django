bulk_create

permite acregar un array a la base de datos mediante el ORM

Categoria.objects.bulk_create([
Categoria(descripcion='Desarrollo Web Django',activo=False),
Categoria(descripcion='Replicacion con SymmetricDS', activo=True),
Categoria(descripcion='Domina ORM de Django', activo=True),
Categoria(descripcion='RestFul Api con Django FrameWork', activo=False),
Categoria(descripcion='Administración PostgreSQL', activo=True)
]

MODELS SERIALIZERS

class ProductoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Producto
        fields = '__all__'

La clase ProductoSerializer construida en la clase anterior, tiene varios métodos:
is_valid(self, ...): Dice si la data es suficiente y válida para crear/actualizar una instancia modelo.
save(self, ...): El cual sabe cómo crear o actualizar un modelo.
create(self, validated_data, ..): Sabe cómo crear la instancia. Se puede sobreescribir para poder personalizar la tarea de creación.
update(self, instance, validated_data, ..): Sabe cómo actualizar la instancia. Se puede sobreescribir para poder personalizar la tarea de actualización.

LAS CLASES VIEWSET permiten put, delit, view, post
TE ARMAN TODO EL SHOW


Escogiendo cuál clase base usar
Hemos visto 4 tipos de vistas

Vistas Django Puro
Sub Clases APIView
Sub Clases generics.*
viewsets.ModelViewSet

Así que cómo o cuándo usar cual vista.  Aunque no es ley, sólo planteo posibilidades que considero más adecuadas.
Use viewsets.ModelViewSet cuando va a permitir todas o la mayoría de las operaciones CRUD en un modelo.

Use genéricos.* Cuando solo desee permitir algunas operaciones en un modelo
Usa APIView cuando quieras personalizar completamente el comportamiento

Bueno y con esto terminamos esta sección y ya sólo nos falta ver cómo tener control de acceso a nuestra
api.

CONFIGURACION ESQUEMA DE SEGURIDAD
#settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}


Luego de ejecutar las migraciones

REST_FRAMEWORK = {
    # ...
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}


En la vista UserCreate, debemos anular la configuración global de autenticación

para esto debemos setear en vacío las propiedades authentication_classes y permission_classes,

agregándole lo siguiente a la clase UserCreate

authentication_classes = ()
permission_classes = ()
También, debemos asegurarnos que se cree el token cuando el usuario se cree con la vista UserCreate,

así que debemos actualizar el UserSerializer.

#Importar Token

from rest_framework.authtoken.models import Token

agregando

Token.objects.create(user=user)

antes del return

